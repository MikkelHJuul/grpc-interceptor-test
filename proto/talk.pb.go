// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.13.0
// source: talk.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EmptyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EmptyRequest) Reset() {
	*x = EmptyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_talk_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmptyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmptyRequest) ProtoMessage() {}

func (x *EmptyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_talk_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmptyRequest.ProtoReflect.Descriptor instead.
func (*EmptyRequest) Descriptor() ([]byte, []int) {
	return file_talk_proto_rawDescGZIP(), []int{0}
}

type SingleReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Variable uint64 `protobuf:"varint,1,opt,name=variable,proto3" json:"variable,omitempty"`
	Constant string `protobuf:"bytes,2,opt,name=constant,proto3" json:"constant,omitempty"`
}

func (x *SingleReply) Reset() {
	*x = SingleReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_talk_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleReply) ProtoMessage() {}

func (x *SingleReply) ProtoReflect() protoreflect.Message {
	mi := &file_talk_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleReply.ProtoReflect.Descriptor instead.
func (*SingleReply) Descriptor() ([]byte, []int) {
	return file_talk_proto_rawDescGZIP(), []int{1}
}

func (x *SingleReply) GetVariable() uint64 {
	if x != nil {
		return x.Variable
	}
	return 0
}

func (x *SingleReply) GetConstant() string {
	if x != nil {
		return x.Constant
	}
	return ""
}

var File_talk_proto protoreflect.FileDescriptor

var file_talk_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x0e, 0x0a, 0x0c,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x45, 0x0a, 0x0b,
	0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x76,
	0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x76,
	0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x74, 0x32, 0x39, 0x0a, 0x0b, 0x54, 0x61, 0x6c, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x2a, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x6e, 0x79, 0x12, 0x0d, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x53,
	0x69, 0x6e, 0x67, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x30, 0x01, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_talk_proto_rawDescOnce sync.Once
	file_talk_proto_rawDescData = file_talk_proto_rawDesc
)

func file_talk_proto_rawDescGZIP() []byte {
	file_talk_proto_rawDescOnce.Do(func() {
		file_talk_proto_rawDescData = protoimpl.X.CompressGZIP(file_talk_proto_rawDescData)
	})
	return file_talk_proto_rawDescData
}

var file_talk_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_talk_proto_goTypes = []interface{}{
	(*EmptyRequest)(nil), // 0: EmptyRequest
	(*SingleReply)(nil),  // 1: SingleReply
}
var file_talk_proto_depIdxs = []int32{
	0, // 0: TalkService.GetMany:input_type -> EmptyRequest
	1, // 1: TalkService.GetMany:output_type -> SingleReply
	1, // [1:2] is the sub-list for method output_type
	0, // [0:1] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_talk_proto_init() }
func file_talk_proto_init() {
	if File_talk_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_talk_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmptyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_talk_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_talk_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_talk_proto_goTypes,
		DependencyIndexes: file_talk_proto_depIdxs,
		MessageInfos:      file_talk_proto_msgTypes,
	}.Build()
	File_talk_proto = out.File
	file_talk_proto_rawDesc = nil
	file_talk_proto_goTypes = nil
	file_talk_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// TalkServiceClient is the client API for TalkService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TalkServiceClient interface {
	GetMany(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (TalkService_GetManyClient, error)
}

type talkServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTalkServiceClient(cc grpc.ClientConnInterface) TalkServiceClient {
	return &talkServiceClient{cc}
}

func (c *talkServiceClient) GetMany(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (TalkService_GetManyClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TalkService_serviceDesc.Streams[0], "/TalkService/GetMany", opts...)
	if err != nil {
		return nil, err
	}
	x := &talkServiceGetManyClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TalkService_GetManyClient interface {
	Recv() (*SingleReply, error)
	grpc.ClientStream
}

type talkServiceGetManyClient struct {
	grpc.ClientStream
}

func (x *talkServiceGetManyClient) Recv() (*SingleReply, error) {
	m := new(SingleReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TalkServiceServer is the server API for TalkService service.
type TalkServiceServer interface {
	GetMany(*EmptyRequest, TalkService_GetManyServer) error
}

// UnimplementedTalkServiceServer can be embedded to have forward compatible implementations.
type UnimplementedTalkServiceServer struct {
}

func (*UnimplementedTalkServiceServer) GetMany(*EmptyRequest, TalkService_GetManyServer) error {
	return status.Errorf(codes.Unimplemented, "method GetMany not implemented")
}

func RegisterTalkServiceServer(s *grpc.Server, srv TalkServiceServer) {
	s.RegisterService(&_TalkService_serviceDesc, srv)
}

func _TalkService_GetMany_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EmptyRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TalkServiceServer).GetMany(m, &talkServiceGetManyServer{stream})
}

type TalkService_GetManyServer interface {
	Send(*SingleReply) error
	grpc.ServerStream
}

type talkServiceGetManyServer struct {
	grpc.ServerStream
}

func (x *talkServiceGetManyServer) Send(m *SingleReply) error {
	return x.ServerStream.SendMsg(m)
}

var _TalkService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "TalkService",
	HandlerType: (*TalkServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetMany",
			Handler:       _TalkService_GetMany_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "talk.proto",
}
